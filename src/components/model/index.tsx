/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useEffect } from 'react';
import { useFrame } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';

type GLTFResult = GLTF & {
	nodes: {
		Beta_Joints: THREE.SkinnedMesh
		Beta_Surface: THREE.SkinnedMesh
		mixamorigHips: THREE.Bone
	}
	materials: {
		Beta_Joints_MAT: THREE.MeshStandardMaterial
		['asdf1:Beta_HighLimbsGeoSG2']: THREE.MeshStandardMaterial
	}
}

type ActionName = 'agree' | 'headShake' | 'idle' | 'run' | 'sad_pose' | 'sneak_pose' | 'walk';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

const NAME_SPINE: string = 'mixamorigSpine';
const NAME_NECK: string = 'mixamorigNeck';

const getIndexesOfBone = (bone: string, tracks: THREE.KeyframeTrack[]) => {
	const indexes: number[] = [];
	tracks.forEach((track, idx) => {
		if (track.name.indexOf(bone) !== -1) {
			indexes.push(idx);
		};
	});

	return indexes;
};

export default function Model(props: JSX.IntrinsicElements['group']) {
	const group = useRef<THREE.Group>();
	const { nodes, materials, animations, scene } = useGLTF('/Xbot.glb') as GLTFResult;
	const { actions } = useAnimations<THREE.AnimationClip>(animations, group);
	
	// get bones of neck and waist
	let neck: THREE.Bone;
	let waist: THREE.Bone;

	nodes.Beta_Surface.skeleton.bones.forEach(bone => {
		if (bone.name === NAME_NECK) neck = bone;
		if (bone.name === NAME_SPINE) waist = bone;
	});

	// get index of track by name of bone
	const idleAnimation = THREE.AnimationClip.findByName(animations, 'idle');
	let indexes_neck: number[] = getIndexesOfBone(NAME_NECK, idleAnimation.tracks);
	let indexes_waist: number[] = getIndexesOfBone(NAME_SPINE, idleAnimation.tracks);
	console.log(indexes_neck.map(index => idleAnimation.tracks[index]))
	console.log(indexes_neck)

	idleAnimation.tracks.splice(indexes_neck[0], indexes_neck.length);
	idleAnimation.tracks.splice(indexes_waist[0] - indexes_neck.length, indexes_waist.length);

	useEffect(() => {
		actions.idle?.play();
	});

	return (
		<group ref={group} {...props} dispose={null}>
			<group scale={0.015}>
				<primitive object={nodes.mixamorigHips} />
				<skinnedMesh
					castShadow
					receiveShadow
					geometry={nodes.Beta_Joints.geometry}
					material={materials.Beta_Joints_MAT}
					skeleton={nodes.Beta_Joints.skeleton}
				/>
				<skinnedMesh
					castShadow
					receiveShadow
					geometry={nodes.Beta_Surface.geometry}
					material={materials['asdf1:Beta_HighLimbsGeoSG2']}
					skeleton={nodes.Beta_Surface.skeleton}
				/>
			</group>
		</group>
	);
};

useGLTF.preload('/Xbot.glb');

